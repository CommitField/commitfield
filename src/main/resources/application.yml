server:
  port: 8090
  timezone: Asia/Seoul
spring:
  config:
    import: application-secret.yml
  output:
    ansi:
      enabled: ALWAYS
  profiles:
    active: dev
    include: secret
  datasource:
    url: jdbc:mysql://localhost:3306/cmf_db?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Seoul
    username: root
    password: root123414
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        default_batch_fetch_size: 100
        format_sql: true
        highlight: true
        use_sql_comments: true
    websocket:
      enabled: true
  custom:
    dev:
      cookieDomain: localhost
      frontUrl: "http://${custom.dev.cookieDomain}:5173"
      backUrl: "http://${custom.dev.cookieDomain}:${server.port}"
    prod:
      cookieDomain: cmf.seoez.site
      frontUrl: "https://www.${custom.prod.cookieDomain}/"
      backUrl: "https://api.${custom.prod.cookieDomain}/"
    site:
      name: "commit-field"
      cookieDomain: "${custom.dev.cookieDomain}"
      frontUrl: "${custom.dev.frontUrl}"
      backUrl: "${custom.dev.backUrl}"
    # Lettuce 클라이언트 설정 (Redis 연결을 관리하는 클라이언트)
  redis:
    host: localhost  # Redis 서버의 호스트명 (Docker를 사용할 경우 `localhost` 또는 `host.docker.internal` 사용)
    port: 6379  # Redis 서버 포트

  lettuce:
    pool:
      max-active: 10  # 최대 활성 커넥션 수
      max-wait: -1  # 커넥션 풀에서 대기할 수 있는 최대 시간 (-1은 무제한 대기)
      max-idle: 8  # 커넥션 풀에서의 최대 유휴 커넥션 수
      min-idle: 4  # 커넥션 풀에서의 최소 유휴 커넥션 수

# swagger 설정
springdoc:
  swagger-ui:
    path: /api-test  # swagger-ui 접근 경로에 대한 별칭, 해당 주소로 접속해도 http://localhost:8080/swagger-ui/index.html로 리다이렉션 됨.
    groups-order: DESC # path, query, body, response 순으로 출력
    tags-sorter: alpha # 태그를 알파벳 순으로 정렬
    operations-sorter: method  # delete - get - patch - post - put 순으로 정렬, alpha를 사용하면 알파벳 순으로 정렬 가능

#  paths-to-match:
#    - /api/** # swagger-ui에 표시할 api의 엔드포인트 패턴


logging:
  level:
    com.commit-field.commitField: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.orm.jdbc.bind: TRACE
    org.hibernate.orm.jdbc.extract: TRACE
    org.springframework.transaction.interceptor: TRACE